{
  "!name": "WebSquare",
  "$p": {
    "dateDiff": {
      "!type": "fn(startDate: string, endDate: string)",
      "!doc": "두 날짜 사이의 차이를 반환\n\n**Parameters:**\n\n```startDate``` - ```String:Y``` - 시작 날짜\n\n```endDate``` - ```String:Y``` - 끝 날짜\n\n**Return:**\n\n```Number``` - 두 날짜의 차이\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\nvar numResult1 = $p.dateDiff(\"19450815\", \"19450816\");\n//반환 값 예시) 1\n\nvar numResult2 = $p.dateDiff(\"20120120\", \"20120210\");\n//반환 값 예시) 21\n\nvar numResult3 = $p.dateDiff(\"20120210\", \"20120120\");\n//반환 값 예시) -21\n```\n\n"
    },
    "getTimeoutKeyList": {
      "!type": "fn()",
      "!doc": "일정 시간이 지난 후에 함수를 실행하기 위해서 '$p.setTimeout'로 등록된 Timeout 객체의 키 값을 배열로 반환\n\n이 함수는 'Page Scope'가 적용되지 않음\n\n**Return:**\n\n```Array``` - Timeout 객체의 키 값의 배열\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// Timeout 등록 예시\n$p.setTimeout(\n    function () {\n        console.log(\"setTimeout\");\n    },\n    {\n        key: \"exam_timeout1\",\n        delay: 3000\n    }\n);\n\nvar arrKeyList = $p.getTimeoutKeyList();\n// 반환 값 예시) ['exam_timeout1']\n\n// 등록된 Timeout 객체 해제\narrKeyList.forEach(function (argKey) {\n    $p.clearTimeout(argKey); // timeout 객체 제거\n});\n```\n\n"
    },
    "parent": {
      "!type": "fn()",
      "!doc": "호출한 화면의 부모 페이지의 Scope 객체를 반환\n\n팝업 유형이 'iframePopup', 'browserPopup'일 때, 팝업 화면은 별도의 Window 객체에 생성되므로 이 경우 해당 함수를 호출하면, 팝업을 호출한 화면의 최상위 페이지의 Scope 객체가 반환됨\n```javascript\n(주의 사항)\n호출하는 화면이 WFrame의 'scpoe' 속성이 'true'로 지정되지 않은 화면이라면 부모 화면의 최상위 페이지의 Scope 객체가 반환됨\n('Websquare Configure의 client.config.xml 편집모드에서 '컴포넌트' 탭의 'WFrame -> scope'의 값은 'true'임)\n```\n\n\n\n**Return:**\n\n```Object``` - 전역 Window객체 또는 WFrame의 Scope 객체\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 예시 1) 부모 페이지에 구성된 InputBox 컴포넌트의 아이디가 'ibx_exam1'일 때 컴포넌트의 'setValue' 함수를 호출하는 예시\n$p.parent().ibx_exam1.setValue(\"Example\");\n\n// 예시 2) 부모 페이지의 'scwin.getTopPageInfo' 함수를 호출하는 예시\n$p.parent().scwin.getTopPageInfo();\n```\n\n"
    },
    "data": {
      "set": {
        "!type": "fn(dataType: string, data: +Object, dcInfo: +Object)",
        "!doc": "여러 개의 DataList 또는 DataMap에 데이터를 할당\n```javascript\n(참고 사항)\nLinkedDataList, AliasDataList, AliasDataMap은 제외 (이 객체들의 데이터는 참조한 DataList 또는 DataMap에 할당해야 함)\n```\n\n\n\n**Parameters:**\n\n```dataType``` - ```String:Y``` - 데이터 객체(data)에 지정할 데이터의 타입 [ARRAY, JSON, XML]\n\n```data``` - ```JSON||ARRAY||XML:Y``` - 데이터 타입과 동일한 데이터 객체\n\n```dcInfo``` - ```Array:N``` - DataList 또는 DataMap의 아이디의 문자열 또는 데이터 할당 조건을 정의한 JSON 객체를 배열로 정의\n\n|property|type|description|\n|:-|:-|:-|\n|데이터|객체에서 이 값에 지정한 아이디 또는 조건에 해당하는 데이터를 추출하여 할당|null|\n|(JSON|형식으로 정의하는 예시)|null|\n|{|null|null|\n|\"id\"|\"화면에 정의된 데이터 객체의 아이디\",|null|\n|\"key\"|\"두 번째 인자에 정의된 키\"|null|\n|}|null|null|\n|이|값이 지정되지 않은 경우 데이터 객체에 정의된 키와 동일한 아이디를 가진 데이터 객체에 데이터가 할당됨|null|\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// (데이터컬렉션의 소스 예시)\n<w2:dataList id=\"dataList1\" baseNode=\"list\" repeatNode=\"map\" saveRemovedData=\"true\">\n    <w2:columnInfo>\n        <w2:column id=\"code\" name=\"코드\" dataType=\"text\"></w2:column>\n        <w2:column id=\"label\" name=\"코드명\" dataType=\"text\"></w2:column>\n    </w2:columnInfo>\n</w2:dataList>\n<w2:dataMap id=\"dataMap1\" baseNode=\"map\">\n    <w2:keyInfo>\n        <w2:key id=\"lang\" name=\"언어코드\" dataType=\"text\"></w2:key>\n        <w2:key id=\"output\" name=\"출력값\" dataType=\"text\"></w2:key>\n    </w2:keyInfo>\n</w2:dataMap>\n\n// 예시 1) 첫 번째 인자(dataType)별\n// 예시 1-1) JSON 유형\n// 두 번째 인자 값의 데이터는 JSON 유형으로 정의되어 있으며, 총 3개의 KEY(\"dataList1\", \"dataMap1\", \"undefined_data\")로 구성되어 있음\n$p.data.set(\n    \"JSON\",\n    {\n        \"dataList1\": [\n            { \"code\": \"C0001\", \"label\": \"CODE1\" }\n        ],\n        \"dataMap1\": {\n            \"lang\": \"en\", \n            \"output\": \"WebSquare\"\n        },\n        \"undefined_data\": { \"code\": \"C0001\", \"label\": \"CODE1\" }\n    }\n);\n// 예시 1-1) JSON 유형 - 실행 결과\n// KEY가 \"dataList1\"와 \"dataMap1\"은 화면에 정의된 데이터 객체와 아이디가 동일하기 때문에 값이 할당됨\n// 반면, \"undefined_data\"는 화면에 정의된 데이터 객체의 아이디가 일치하는 객체가 없기 때문에 무시 됨\n\n// 예시 1-2) ARRAY 유형\n// 두 번째 인자 값의 데이터는 JSON 유형으로 정의되어 있으며, 총 3개의 KEY(\"dataList1\", \"dataMap1\", \"undefined_data\")로 구성되어 있음\n$p.data.set(\n    \"ARRAY\",\n    {\n        \"dataList1\": {\n            \"columnInfo\": [\n                \"code\",\n                \"label\"\n            ],\n            \"data\": [\"C0001\", \"CODE1\", \"C0002\", \"CODE2\"]\n        },\n        \"dataMap1\": [\"en\", \"WebSquare\"],\n        \"undefined_data\": [\"C0001\", \"CODE1\"]\n    }\n);\n// 예시 1-2) ARRAY 유형 - 실행 결과\n// KEY가 \"dataList1\"와 \"dataMap1\"은 화면에 정의된 데이터 객체와 아이디가 동일하기 때문에 값이 할당됨\n// 반면, \"undefined_data\"는 화면에 정의된 데이터 객체의 아이디가 일치하는 객체가 없기 때문에 무시 됨\n\n// 예시 1-3) XML 유형\nlet strXML = '' +\n    '<map>' +\n    '    <list id=\"dataList1\">' +\n    '        <map>' +\n    '            <code>C0001</code>' +\n    '            <label>CODE1</label>' +\n    '        </map>' +\n    '        <map>' +\n    '            <code>C0002</code>' +\n    '            <label>CODE2</label>' +\n    '        </map>' +\n    '    </list>' +\n    '    <map id=\"dataMap1\">' +\n    '        <lang>en</lang>' +\n    '        <output>WebSquare</output>' +\n    '    </map>' +\n    '    <map id=\"undefined_data\">' +\n    '        <code>C0001</code>' +\n    '        <label>CODE1</label>' +\n    '    </map>' +\n    '</map>';\n// 예시 1-3) XML 유형 - 실행 결과\n// XML 경로 \"map/list/@id\"에 정의된 \"dataList1\"와 XML 경로 \"map/map[1]/@id\"에 정의된 \"dataMap1\"은 화면에 정의된 데이터 객체와 아이디가 동일하기 때문에 값이 할당됨\n// 반면, XML 경로 \"map/map[2]/@id\"에 정의된 \"undefined_data\"는 화면에 정의된 데이터 객체의 아이디가 일치하는 객체가 없기 때문에 무시 됨\n\n// 예시 2) 세 번째 인자(idArray)\n// 예시 2-1) 아이디 문자열\n// 두 번째 인자 값의 데이터는 JSON 유형으로 정의되어 있으며, 총 2개의 키(\"dataList1\", \"undefined_data\")로 구성되어 있음\n$p.data.set(\n    \"JSON\",\n    {\n        \"dataList1\": [\n            { \"code\": \"C0001\", \"label\": \"CODE1\" }\n        ],\n        \"undefined_data\": { \"code\": \"C0001\", \"label\": \"CODE1\" }\n    }, \n    [\"dataList1\", \"dataMap1\", \"undefined_data\", \"undefined_id\"]\n);\n// 예시 2-1) 아이디 문자열 - 실행 결과\n// 세 번째 인자에 정의된 아이디 문자열 중에 유효한 값은 화면에 정의된 데이터 객체와 아이디가 일치하는 \"dataList1\", \"dataMap1\" 임\n// 두 번째 인자 값에서 \"dataList1\" 키를 추출하여 할당 함\n// 반면, 두 번째 인자 값에 dataMap1\" 키는 정의되지 않았기 때문에 할당되지 않음\n\n// 예시 2-2) 조건이 정의된 JSON 형식\n// 두 번째 인자 값의 데이터는 JSON 유형으로 정의되어 있으며, 총 2개의 키(\"dataList1\", \"user_dataMap1\", \"undefined_data\")로 구성되어 있음\n$p.data.set(\n    \"JSON\",\n    {\n        \"dataList1\": [\n            { \"code\": \"C0001_condition\", \"label\": \"CODE1\" }\n        ],\n        \"user_dataMap1\": {\n            \"lang\": \"en\",\n            \"output\": \"WebSquare_condition\"\n        },\n        \"undefined_data\": { \"code\": \"C0001\", \"label\": \"CODE1\" }\n    },\n    [{ \"id\": \"dataMap1\", \"key\": \"user_dataMap1\" }, \"dataList1\", \"undefined_data\", \"undefined_id\"]\n);\n// 예시 2-2) 조건이 정의된 JSON 형식 - 실행 결과\n// 세 번째 인자에 정의된 유효한 인자 값은 다음의 2가지 임\n// 1. 배열의 0번째에 정의된 JSON 객체의 \"id\"에 정의된 \"dataMap1\"(화면에 정의된 데이터 객체의 아이디와 JSON 객체의 \"id\"에 할당된 값이 일치)\n// JSON 객체의 \"key\"에 정의된 \"user_dataMap1\"를 두 번째 인자 값에서 추출하여 데이터 객체 \"dataMap1\"에 할당 함\n// 2. 배열의 1번째에 정의된 \"dataList1\"(화면에 정의된 데이터 객체의 아이디와 일치)\n// 두 번째 인자 값에서 \"dataList1\"를 추출하여 데이터 객체 \"dataList1\"에 할당 함\n```\n\n"
      },
      "getBroadcast": {
        "!type": "fn()",
        "!doc": "전체 데이터컬렉션의 Broadcast 기능의 활성화 여부를 반환\n```javascript\n(제약 사항)\n대상은 이 함수를 호출한 페이지와 동일한 Window 객체에 생성된 데이터컬렉션임\nIFrame 의 소스 페이지 또는 '$p.openPopup'으로 생성한 팝업의 유형이 'iframePopup' 또는 'browserPopup'인 경우에는 Window 객체가 다르기 때문에 제외됨\n이 함수는 'Page Scope'가 적용되지 않아 모든 화면에 영향을 미치므로 사용 시 주의가 필요\n```\n\n\n\n**Return:**\n\n```Boolean``` - [true, false] 전체 데이터컬렉션의 Broadcast 기능의 활성화 여부\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 예시) 전체 데이터컬렉션의 Broadcast 기능의 활성화 여부 반환\nvar blnResult = $p.data.getBroadcast();\n// 반환 값 예시 - 활성화된 경우) true\n// 반환 값 예시 - 비활성화된 경우) false\n```\n\n"
      },
      "getInfo": {
        "!type": "fn(dcInfo: +Object)",
        "!doc": "데이터컬렉션의 상세 정보(XML 에서 입력한 Attribute 값)를 조회하는 함수\n\n**Parameters:**\n\n```dcInfo``` - ```Array:N``` - 각 데이터컬렉션(DataList/DataMap) 아이디를 담고 있는 배열 (값을 지정하지 않을 경우 모든 데이터컬렉션이 대상)\n\n**Return:**\n\n```JSON``` - 각 데이터컬렉션의 하위 특성 값을 가지는 JSON 객체\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n$p.data.getInfo(); // 모든 데이터컬렉션의 상세정보 조회\n$p.data.getInfo([\"dataList1\",\"dataMap1\"]); // dataList1, dataMap1에 대한 상세정보 조회\n```\n\n"
      },
      "get": {
        "!type": "fn(type: string, options: +Object, returnOptions: +Object)",
        "!doc": "여러 개의 DataList 또는 DataMap의 데이터를 지정한 유형으로 반환\n\n**Parameters:**\n\n```type``` - ```String:Y``` - 반환 받을 데이터 유형 [JSON, XML, ARRAY]\n\n```options``` - ```Array:Y``` - 반환받을 DataList 또는 DataMap의 조건이 담긴 배열 (배열에 아이디 문자열 또는 반환 조건이 담긴 JSON 객체를 할당)\n\n|property|type|description|\n|:-|:-|:-|\n|(JSON|객체를 정의한 예시)|null|\n|{|null|null|\n|\"key\"|<String:N> 아이디 대신 할당할 값|null|\n|\"action\"|<String:N> [default : 'all', 'modified', 'inserted', 'deleted', 'updated', 'matched', 'unmatched'] 필터 유형|null|\n|\"matchedColumn\"|<String:N> 'action'의 설정 값이 'matched' 또는 'unmatched'인 경우 대상 컬럼의 아이디|null|\n|\"matchedData\"|<String:N> 'action'의 설정 값이 'matched' 또는 'unmatched'인 경우 비교할 데이터|null|\n|\"includeColumns\"|<ARRAY:N> 컬럼 아이디가 담긴 배열|null|\n|}|null|null|\n\n\n```returnOptions``` - ```Object:N``` - 반환 받을 데이터의 추가 선택 사항\n\n|property|type|description|\n|:-|:-|:-|\n|returnOptions.singleMode|<Boolean:N>|[default: false, true] DataList 또는 DataMap의 아이디를 제외하고 데이터만으로 구성할지의 여부|\n|반환|받을 데이터 객체가 1개인 경우에만 동작함|null|\n|true|인 경우 DataList 또는 DataMap의 아이디를 포함하여 반환되고, false인 경우 아이디가 제외되고 오직 데이터만 반환|null|\n\n**Return:**\n\n```JSON||XML||Array``` - 데이터 객체\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// (데이터컬렉션 소스 예시)\n// <w2:dataCollection baseNode=\"map\">\n//     <w2:dataList id=\"dataList1\" baseNode=\"list\" repeatNode=\"map\" saveRemovedData=\"true\">\n//         <w2:columnInfo>\n//             <w2:column id=\"code\" name=\"코드\" dataType=\"text\"></w2:column>\n//             <w2:column id=\"label\" name=\"코드명\" dataType=\"text\"></w2:column>\n//         </w2:columnInfo>\n//         <w2:data use=\"true\">\n//             <w2:row>\n//                 <code><![CDATA[C0001]]></code>\n//                 <label><![CDATA[TYPE1]]></label>\n//             </w2:row>\n//             <w2:row>\n//                 <code><![CDATA[C0002]]></code>\n//                 <label><![CDATA[TYPE2]]></label>\n//             </w2:row>\n//         </w2:data>\n//     </w2:dataList>\n//     <w2:dataMap id=\"dataMap1\" baseNode=\"map\" >\n//         <w2:keyInfo>\n//             <w2:key id=\"lang\" name=\"언어코드\" dataType=\"text\"></w2:key>\n//             <w2:key id=\"output\" name=\"출력값\" dataType=\"text\"></w2:key>\n//         </w2:keyInfo>\n//         <w2:data use=\"true\">\n//             <lang><![CDATA[lang01]]></lang>\n//             <output><![CDATA[javascript]]></output>\n//         </w2:data>\n//     </w2:dataMap>\n// </w2: dataCollection >\n\n// 예시 1) 단건 - 두 번째 인자(options)에 반환 받을 DataList 또는 DataMap의 아이디만 지정한 경우\nvar jsnData = $p.data.get(\"JSON\", [\"dataMap1\"]);\n// 반환 값 예시) \n// {\"dataMap1\":{\"lang\":\"lang01\",\"output\":\"javascript\"}}\n\n// 예시 2) 다건 - 두 번째 인자(options)에 반환 받을 DataList 또는 DataMap의 아이디만 지정한 경우\nvar jsnData = $p.data.get(\"JSON\", [\"dataMap1\", \"dataList1\"]);\n// 반환 값 예시) \n// {\n//     \"dataMap1\": { \"lang\": \"lang01\", \"output\": \"javascript\" },\n//     \"dataList1\": [{ \"code\": \"C0001\", \"label\": \"TYPE1\", \"rowStatus\": \"R\" }, { \"code\": \"C0002\", \"label\": \"TYPE2\", \"rowStatus\": \"R\" }]\n// }\n\n// 예시 3) id 'dataMap1'를 'dma_exam1'로 변경하여 반환. 'id' : DataList 또는 DataMap의 아이디. 'key' : 반환될 데이터의 'id'를 지정한 값으로 변경\nvar jsnData = $p.data.get(\"JSON\", [{ id: \"dataMap1\", key: \"dma_exam1\" }]);\n// 반환 값 예시) \n// {\"dma_exam1\":{\"lang\":\"lang01\",\"output\":\"javascript\"}}\n\n// 예시 4) id를 제외하고 반환. 세 번째 인자(returnOptions)의 속성 \"singleMode\"를 true로 설정\nvar jsnData = $p.data.get(\"JSON\", [\"dataMap1\"], { \"singleMode\": true });\n// 반환 값 예시) \n// {\"lang\":\"lang01\",\"output\":\"javascript\"}\n\n// 예시 5) 다건 - 배열유형\nvar jsnData = $p.data.get(\"ARRAY\", [\"dataMap1\", \"dataList1\"]);\n// 반환 값 예시) \n// {\n//     \"dataMap1\": { \"lang\": \"lang01\", \"output\": \"javascript\" },\n//     \"dataList1\": {\n//         \"columnInfo\": [\"code\", \"label\"],\n//             \"data\": [\"C0001\", \"TYPE1\", \"C0002\", \"TYPE2\"]\n//     }\n// }\n\n// 예시 6) 다건 - XML 유형\nvar xmlData = $p.data.get(\"XML\", [\"dataMap1\", \"dataList1\"]);\n// 반환 값 예시) \n// <map>\n//     <map id=\"dataMap1\">\n//         <lang>lang01</lang>\n//         <output>javascript</output>\n//     </map>\n//     <list id=\"dataList1\">\n//         <map index=\"0\">\n//             <code>C0001</code>\n//             <label>TYPE1</label>\n//             <rowStatus statusValue=\"0\">R</rowStatus>\n//         </map>\n//         <map index=\"1\">\n//             <code>C0002</code>\n//             <label>TYPE2</label>\n//             <rowStatus statusValue=\"0\">R</rowStatus>\n//         </map>\n//     </list>\n// </map>\n\n// 예시 7) 데이터에 필터 적용 - 수정 상태(삽입, 삭제, 수정)의 데이터만 추출\nvar jsnData = $p.data.get(\"JSON\", [{ id: \"dataList1\", action: \"modified\" }]);\n// 반환 값 예시)\n// {\n//     \"dataList1\":[\n//         {\"code\":\"C0004\",\"label\":\"TYPE4\",\"rowStatus\":\"C\"},\n//         {\"code\":\"C0001\",\"label\":\"TYPE1\",\"rowStatus\":\"D\"},\n//         {\"code\":\"C0002\",\"label\":\"TYPE2-M\",\"rowStatus\":\"U\"},\n//         {\"code\":\"C0003\",\"label\":\"TYPE3\",\"rowStatus\":\"E\"}\n//     ]\n// }\n```\n\n"
      },
      "create": {
        "!type": "fn(dataCollectionInfo: +Object)",
        "!doc": "생성할 객체의 구조를 JSON 객체 또는 XML 형식의 문자열로 정의하여 DataList 또는 DataMap을 생성해 줌\n\n**Parameters:**\n\n```dataCollectionInfo``` - ```JSON||String:Y``` - DataList 또는 DataMap의 구조를 정의한 JSON 객체 또는 XML 문자열\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 예시 1) DataList 생성 (JSON 객체)\nvar jsnOptionDataList = {\n    \"id\": \"dlt_exam_json\",\n    \"type\": \"dataList\",\n    \"option\": {\n        \"baseNode\": \"list\",\n        \"repeatNode\": \"map\"\n    },\n    \"columnInfo\": [\n        {\n            \"id\": \"code\",\n            \"name\": \"코드\",\n            \"dataType\": \"text\"\n        }, {\n            \"id\": \"label\",\n            \"name\": \"코드명\",\n            \"dataType\": \"text\"\n        }\n    ]\n};\n$p.data.create(jsnOptionDataList);\n\n// 예시 2) DataMap 생성 (JSON 객체) \nvar jsnOptionDataMap = {\n    \"id\": \"dma_exam_json\",\n    \"type\": \"dataMap\",\n    \"option\": {\n        \"baseNode\": \"map\"\n    },\n    \"keyInfo\": [\n        {\n            \"id\": \"code\",\n            \"name\": \"코드\",\n            \"dataType\": \"text\"\n        }, {\n            \"id\": \"label\",\n            \"name\": \"코드명\",\n            \"dataType\": \"text\"\n        }\n    ]\n};\n$p.data.create(jsnOptionDataMap);\n\n// 예시 3) DataList 생성 (XML 문자열)\nvar strDataList = '<w2:dataList id=\"dlt_exam_xml\" baseNode=\"vector\" repeatNode=\"item\" valueNode=\"\"> ' +\n    '<w2:columnInfo>' +\n    '<w2:column id=\"code\" name=\"코드\" dataType=\"text\"></w2:column>' +\n    '<w2:column id=\"label\" name=\"코드명\" dataType=\"text\"></w2:column>' +\n    '</w2:columnInfo>' +\n    '</w2:dataList>';\n$p.data.create(strDataList);\n\n// 예시 4) DataMap 생성 (XML 문자열)\nvar strDataMap = '<w2:dataMap baseNode=\"map\" id=\"dma_exam_xml\">' +\n    '<w2:keyInfo>' +\n    '<w2:key id=\"code\" name=\"코드\" dataType=\"text\"></w2:key>' +\n    '<w2:key id=\"label\" name=\"코드명\" dataType=\"text\"></w2:key>' +\n    '</w2:keyInfo>' +\n    '</w2:dataMap>';\n$p.data.create(strDataMap);\n```\n\n"
      },
      "getAllDataCollection": {
        "!type": "fn(type: string)",
        "!doc": "실행된 모든 화면의 데이터컬렉션 정보를 반환\n```javascript\n 지정한 정보 유형(type)에 따라 데이터컬렉션의 아이디 또는 데이터컬렉션 객체를 반환 받을 수 있음\n (제약 사항)\n대상은 이 함수를 호출한 페이지와 동일한 Window 객체에 생성된 데이터컬렉션임\nIFrame 의 소스 페이지 또는 '$p.openPopup'으로 생성한 팝업의 유형이 'iframePopup' 또는 'browserPopup'인 경우에는 Window 객체가 다르기 때문에 제외됨\n이 함수는 'Page Scope'가 적용되지 않아 모든 화면에 영향을 미치므로 사용 시 주의가 필요\n```\n\n\n\n**Parameters:**\n\n```type``` - ```String:N``` - 데이터컬렉션 정보 유형 ('object' 로 지정된 경우 객체를 반환하고 그 외의 경우에는 아이디 문자열을 반환)\n\n**Return:**\n\n```Array``` - 데이터컬렉션의 아이디 문자열 또는 객체를 담은 배열\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 예시 1) 이 함수를 호출한 화면의 Window 객체에 속한 모든 데이터컬렉션의 아이디를 반환\n// 실행 화면에 WFrame 컴포넌트가 구성되어 있고 아이디가 'wfm_exam1'인 경우\n// 실행 화면에 정의된 \"dataList1\"와 WFrame 소스 화면에 정의된 \"dataList1_w\"와 \"dataMap1_w\"의 실행 시점의 아이디가 반환된 예시\nvar arrResult = $p.data.getAllDataCollection();\n// 반환 값 예시) [\"mf_dataList1\",\"mf_wfm_exam1_dataList1_w\",\"mf_wfm_exam1_dataMap1_w\"]\n\n// 예시 2) 이 함수를 호출한 화면의 Window 객체에 속한 모든 데이터컬렉션의 객체를 반환\nvar arrResult = arrResult = $p.data.getAllDataCollection(\"object\");\n// 반환 값 예시)\n// [\n//     {id: 'mf_dataList1', element: {\u2026}, \u2026}, \n//     {id: 'mf_wfm_exam1_dataList1_w', element: {\u2026}, \u2026},\n//     {id: 'mf_wfm_exam1_dataMap1_w', element: {\u2026}, \u2026}\n// ]\n\n// 반환된 객체는 데이터 객체가 가진 함수를 사용할 수 있음\n// 첫 번째 Data 객체의 유형을 출력하고자 할 때\nvar strType = arrResult[0].getObjectType();\n// 반환 값 예시) 'dataList'\n```\n\n"
      },
      "setBroadcast": {
        "!type": "fn(broadCast: bool)",
        "!doc": "모든 화면의 전체 데이터컬렉션의 Broadcast 기능의 활성화 여부를 설정\n\nbroadCast = false : Broadcast 기능이 비활성화 됨 (데이터 객체들(DataList, DataMap 등)의 값 변경 시, 데이터 객체와 연결된 컴포넌트가 동기화되지 않음)\n\nbroadCast = true : Broadcast 기능을 활성화 됨 (데이터 객체들(DataList, DataMap 등)의 값 변경 시, 데이터 객체와 연결된 컴포넌트가 동기화 됨)\n```javascript\n(제약 사항)\n대상은 이 함수를 호출한 페이지와 동일한 Window 객체에 생성된 데이터컬렉션임\nIFrame 의 소스 페이지 또는 '$p.openPopup'으로 생성한 팝업의 유형이 'iframePopup' 또는 'browserPopup'인 경우에는 Window 객체가 다르기 때문에 제외됨\n이 함수는 'Page Scope'가 적용되지 않아 모든 화면에 영향을 미치므로 사용 시 주의가 필요\n```\n\n\n\n**Parameters:**\n\n```broadCast``` - ```Boolean:Y``` - [true, false] Broadcast 기능의 활성화 여부\n\n\ntrue이면 Broadcast가 활성화되어 데이터컬렉션과 컴포넌트를 동기화 함\nfalse이면 Broadcast가 비활성화되어 동기화되지 않음\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 모든 화면의 모든 데이터컬렉션의 Broadcast를 비활성화 함\n$p.data.setBroadcast(false);\n\n//데이터 객체 제어(삽입, 수정, 삭제) 로직 수행\n\n// 모든 화면의 모든 데이터컬렉션의 Broadcast를 활성화 함 - 데이터 객체와 연결된 컴포넌트가 동기화 됨\n$p.data.setBroadcast(true);\n```\n\n"
      },
      "remove": {
        "!type": "fn(dataCollectionId: string)",
        "!doc": "입력한 dataCollectionId에 해당하는 데이터컬렉션을 삭제함 (DataList, DataMap, LinkedDataList, AliasDataList, AliasDataMap)\n```javascript\n(참고 사항)\nLinkedDataList와 연결된 DataList가 삭제되면, LinkedDataList도 함께 삭제 됨\nAliasDataList, AliasDataMap에 연결된 DataList또는 DataMap이 삭제되면, AliasDataList와 AliasDataMap은 삭제되지 않고 undefined가 할당\n```\n\n\n\n**Parameters:**\n\n```dataCollectionId``` - ```String:Y``` - DataList, DataMap, LinkedDataList, AliasDataList, AliasDataMap의 아이디\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 예시) 화면에 정의된 아이디가 'dataMap1' 인 데이터 객체를 삭제\n$p.data.remove(\"dataMap1\");\n```\n\n"
      }
    }
  }
}

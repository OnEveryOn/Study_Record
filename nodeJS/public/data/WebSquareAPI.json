{
  "!name": "WebSquare",
  "$p": {
    "data": {
      "set": {
        "!type": "fn(dataType: string, data: +Object, dcInfo: +Object)",
        "!doc": "여러 개의 DataList 또는 DataMap에 데이터를 할당\n```javascript\n(참고 사항)\nLinkedDataList, AliasDataList, AliasDataMap은 제외 (이 객체들의 데이터는 참조한 DataList 또는 DataMap에 할당해야 함)\n```\n\n\n\n**Parameters:**\n\n```dataType``` - ```String:Y``` - 데이터 객체(data)에 지정할 데이터의 타입 [ARRAY, JSON, XML]\n\n```data``` - ```JSON||ARRAY||XML:Y``` - 데이터 타입과 동일한 데이터 객체\n\n```dcInfo``` - ```Array:N``` - DataList 또는 DataMap의 아이디의 문자열 또는 데이터 할당 조건을 정의한 JSON 객체를 배열로 정의\n\n|property|type|description|\n|:-|:-|:-|\n|데이터|객체에서 이 값에 지정한 아이디 또는 조건에 해당하는 데이터를 추출하여 할당|null|\n|(JSON|형식으로 정의하는 예시)|null|\n|{|null|null|\n|\"id\"|\"화면에 정의된 데이터 객체의 아이디\",|null|\n|\"key\"|\"두 번째 인자에 정의된 키\"|null|\n|}|null|null|\n|이|값이 지정되지 않은 경우 데이터 객체에 정의된 키와 동일한 아이디를 가진 데이터 객체에 데이터가 할당됨|null|\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// (데이터컬렉션의 소스 예시)\n<w2:dataList id=\"dataList1\" baseNode=\"list\" repeatNode=\"map\" saveRemovedData=\"true\">\n    <w2:columnInfo>\n        <w2:column id=\"code\" name=\"코드\" dataType=\"text\"><\/w2:column>\n        <w2:column id=\"label\" name=\"코드명\" dataType=\"text\"><\/w2:column>\n    <\/w2:columnInfo>\n<\/w2:dataList>\n<w2:dataMap id=\"dataMap1\" baseNode=\"map\">\n    <w2:keyInfo>\n        <w2:key id=\"lang\" name=\"언어코드\" dataType=\"text\"><\/w2:key>\n        <w2:key id=\"output\" name=\"출력값\" dataType=\"text\"><\/w2:key>\n    <\/w2:keyInfo>\n<\/w2:dataMap>\n\n// 예시 1) 첫 번째 인자(dataType)별\n// 예시 1-1) JSON 유형\n// 두 번째 인자 값의 데이터는 JSON 유형으로 정의되어 있으며, 총 3개의 KEY(\"dataList1\", \"dataMap1\", \"undefined_data\")로 구성되어 있음\n$p.data.set(\n    \"JSON\",\n    {\n        \"dataList1\": [\n            { \"code\": \"C0001\", \"label\": \"CODE1\" }\n        ],\n        \"dataMap1\": {\n            \"lang\": \"en\", \n            \"output\": \"WebSquare\"\n        },\n        \"undefined_data\": { \"code\": \"C0001\", \"label\": \"CODE1\" }\n    }\n);\n// 예시 1-1) JSON 유형 - 실행 결과\n// KEY가 \"dataList1\"와 \"dataMap1\"은 화면에 정의된 데이터 객체와 아이디가 동일하기 때문에 값이 할당됨\n// 반면, \"undefined_data\"는 화면에 정의된 데이터 객체의 아이디가 일치하는 객체가 없기 때문에 무시 됨\n\n// 예시 1-2) ARRAY 유형\n// 두 번째 인자 값의 데이터는 JSON 유형으로 정의되어 있으며, 총 3개의 KEY(\"dataList1\", \"dataMap1\", \"undefined_data\")로 구성되어 있음\n$p.data.set(\n    \"ARRAY\",\n    {\n        \"dataList1\": {\n            \"columnInfo\": [\n                \"code\",\n                \"label\"\n            ],\n            \"data\": [\"C0001\", \"CODE1\", \"C0002\", \"CODE2\"]\n        },\n        \"dataMap1\": [\"en\", \"WebSquare\"],\n        \"undefined_data\": [\"C0001\", \"CODE1\"]\n    }\n);\n// 예시 1-2) ARRAY 유형 - 실행 결과\n// KEY가 \"dataList1\"와 \"dataMap1\"은 화면에 정의된 데이터 객체와 아이디가 동일하기 때문에 값이 할당됨\n// 반면, \"undefined_data\"는 화면에 정의된 데이터 객체의 아이디가 일치하는 객체가 없기 때문에 무시 됨\n\n// 예시 1-3) XML 유형\nlet strXML = '' +\n    '<map>' +\n    '    <list id=\"dataList1\">' +\n    '        <map>' +\n    '            <code>C0001<\/code>' +\n    '            <label>CODE1<\/label>' +\n    '        <\/map>' +\n    '        <map>' +\n    '            <code>C0002<\/code>' +\n    '            <label>CODE2<\/label>' +\n    '        <\/map>' +\n    '    <\/list>' +\n    '    <map id=\"dataMap1\">' +\n    '        <lang>en<\/lang>' +\n    '        <output>WebSquare<\/output>' +\n    '    <\/map>' +\n    '    <map id=\"undefined_data\">' +\n    '        <code>C0001<\/code>' +\n    '        <label>CODE1<\/label>' +\n    '    <\/map>' +\n    '<\/map>';\n// 예시 1-3) XML 유형 - 실행 결과\n// XML 경로 \"map/list/@id\"에 정의된 \"dataList1\"와 XML 경로 \"map/map[1]/@id\"에 정의된 \"dataMap1\"은 화면에 정의된 데이터 객체와 아이디가 동일하기 때문에 값이 할당됨\n// 반면, XML 경로 \"map/map[2]/@id\"에 정의된 \"undefined_data\"는 화면에 정의된 데이터 객체의 아이디가 일치하는 객체가 없기 때문에 무시 됨\n\n// 예시 2) 세 번째 인자(idArray)\n// 예시 2-1) 아이디 문자열\n// 두 번째 인자 값의 데이터는 JSON 유형으로 정의되어 있으며, 총 2개의 키(\"dataList1\", \"undefined_data\")로 구성되어 있음\n$p.data.set(\n    \"JSON\",\n    {\n        \"dataList1\": [\n            { \"code\": \"C0001\", \"label\": \"CODE1\" }\n        ],\n        \"undefined_data\": { \"code\": \"C0001\", \"label\": \"CODE1\" }\n    }, \n    [\"dataList1\", \"dataMap1\", \"undefined_data\", \"undefined_id\"]\n);\n// 예시 2-1) 아이디 문자열 - 실행 결과\n// 세 번째 인자에 정의된 아이디 문자열 중에 유효한 값은 화면에 정의된 데이터 객체와 아이디가 일치하는 \"dataList1\", \"dataMap1\" 임\n// 두 번째 인자 값에서 \"dataList1\" 키를 추출하여 할당 함\n// 반면, 두 번째 인자 값에 dataMap1\" 키는 정의되지 않았기 때문에 할당되지 않음\n\n// 예시 2-2) 조건이 정의된 JSON 형식\n// 두 번째 인자 값의 데이터는 JSON 유형으로 정의되어 있으며, 총 2개의 키(\"dataList1\", \"user_dataMap1\", \"undefined_data\")로 구성되어 있음\n$p.data.set(\n    \"JSON\",\n    {\n        \"dataList1\": [\n            { \"code\": \"C0001_condition\", \"label\": \"CODE1\" }\n        ],\n        \"user_dataMap1\": {\n            \"lang\": \"en\",\n            \"output\": \"WebSquare_condition\"\n        },\n        \"undefined_data\": { \"code\": \"C0001\", \"label\": \"CODE1\" }\n    },\n    [{ \"id\": \"dataMap1\", \"key\": \"user_dataMap1\" }, \"dataList1\", \"undefined_data\", \"undefined_id\"]\n);\n// 예시 2-2) 조건이 정의된 JSON 형식 - 실행 결과\n// 세 번째 인자에 정의된 유효한 인자 값은 다음의 2가지 임\n// 1. 배열의 0번째에 정의된 JSON 객체의 \"id\"에 정의된 \"dataMap1\"(화면에 정의된 데이터 객체의 아이디와 JSON 객체의 \"id\"에 할당된 값이 일치)\n// JSON 객체의 \"key\"에 정의된 \"user_dataMap1\"를 두 번째 인자 값에서 추출하여 데이터 객체 \"dataMap1\"에 할당 함\n// 2. 배열의 1번째에 정의된 \"dataList1\"(화면에 정의된 데이터 객체의 아이디와 일치)\n// 두 번째 인자 값에서 \"dataList1\"를 추출하여 데이터 객체 \"dataList1\"에 할당 함\n```\n\n"
      },
      "getBroadcast": {
        "!type": "fn()",
        "!doc": "전체 데이터컬렉션의 Broadcast 기능의 활성화 여부를 반환\n```javascript\n(제약 사항)\n대상은 이 함수를 호출한 페이지와 동일한 Window 객체에 생성된 데이터컬렉션임\nIFrame 의 소스 페이지 또는 '$p.openPopup'으로 생성한 팝업의 유형이 'iframePopup' 또는 'browserPopup'인 경우에는 Window 객체가 다르기 때문에 제외됨\n이 함수는 'Page Scope'가 적용되지 않아 모든 화면에 영향을 미치므로 사용 시 주의가 필요\n```\n\n\n\n**Return:**\n\n```Boolean``` - [true, false] 전체 데이터컬렉션의 Broadcast 기능의 활성화 여부\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n// 예시) 전체 데이터컬렉션의 Broadcast 기능의 활성화 여부 반환\nvar blnResult = $p.data.getBroadcast();\n// 반환 값 예시 - 활성화된 경우) true\n// 반환 값 예시 - 비활성화된 경우) false\n```\n\n"
      },
      "getInfo": {
        "!type": "fn(dcInfo: +Object)",
        "!doc": "데이터컬렉션의 상세 정보(XML 에서 입력한 Attribute 값)를 조회하는 함수\n\n**Parameters:**\n\n```dcInfo``` - ```Array:N``` - 각 데이터컬렉션(DataList/DataMap) 아이디를 담고 있는 배열 (값을 지정하지 않을 경우 모든 데이터컬렉션이 대상)\n\n**Return:**\n\n```JSON``` - 각 데이터컬렉션의 하위 특성 값을 가지는 JSON 객체\n\n**Since:**\n\n5.0_3.3377A.20181128.161740\n\n**Sample:**\n\n```javascript\n$p.data.getInfo(); // 모든 데이터컬렉션의 상세정보 조회\n$p.data.getInfo([\"dataList1\",\"dataMap1\"]); // dataList1, dataMap1에 대한 상세정보 조회\n```\n\n"
      }
    }
  }
}